* Projekti koostasid Siim Kasemets, Sven-Eerik Bender, Taavi Orumaa.

* -- Kasutusjuhis --
Programmi saab joosta otse IntelliJ command-line'i pealt või cmd kaudu. Programm ise küsib kõik vajaminevad parameetrid ja seega pole vaja ühtegi eelteadmist selle kasutamiseks.
NB! Väga soovituslik on programm käivitada läbi cmd, seda sellepärast, et programm väljastab ekraanile sekundis mitu pilti ning IntelliJ terminal ei suuda sellega järge pidada. Tuleb joosta:
"javac Simulation.java"
"java Simulation"

Kui ei taheta reaalajas simulatsiooni vaadata, vaid näha ainult lõpptulemust, siis saab kasutada ka sisseantud argumente, et programmi joosta:
"javac Simulation.java"
"java Simulation <Mootori Võimsus> <Ratta Diameeter>"

LISA! Kui on tahtmist programmi simuleerida mitu korda erinevate sisseantud parameetritega, siis on selleks lihtsam viis olemas: "SIMMain.py".
Python'i failis tuleb sõnastikus "parameters" lisada vastavad parameetrite väärtused, mida tahetakse katsetada. Faili joostes on väljundis näha iga simulatsiooni tulemused, mis salvestatakse ka eraldi faili. Pärast faili "SIMMain.py" redigeerimist saab faili joosta:
"python SIMMain.py"

* --Projekti Kirjeldus & Protsessi Kirjeldus--
Meie projektiks valmis programm, mis suudab simuleerida (enam-vähem reaalselt) mudelautode sõitmist ringrajal, sõltuvalt erinevatest sisseantud parameetritest, ning näha nende parameetrite mõju auto sõidule, sealhulgas näha reaalajas parameetrite muutumist või automaatselt simuleerida üks sõit. Eesmärgiks oli näha, missuguste parameetrite kombinatsioonidega suudab auto sõita kõige kauem ning mis parameetritega auto lendab õhku/ei jõua väga kaugele.
Kui algas aeg hakata projekti valmistama, siis oli meil algselt paar valikut. Taavi ja Siim olid Python'i projektina valmistanud mängu ja seega oli see algselt üks ideedest, hiljem mõtlesime, et äkki peaks hoopis sama mängu edasi arendama. Aga mitte väga palju hiljem tekkis hoopis mõte teha midagi mudelautodega. Taavi oli selle alaga juba tegelenud ja oskas infot selle kohta leida ning pakkuda. Alustasime kõik koos ideede välja pakkumist, "Kuidas projekt peaks välja nägema?", "Milliseid klasse teha?", "Kuidas auto sõitmine peaks üldse töötama?". Sellised olid meie esimesed sammud projekti alustamiseks. Paar päeva hiljem, läbi higi ja vere, oli Sven üllatusega valmis teinud viisi, kuidas simuleerida command line'ist auto sõitmist ringrajal, sellest kujunes meie peaklass ja otsustasime kõik teised klassid teha autojuppidest. Nende autojuppide klasside loomisel muutub simulatsiooni käitumine ja see töötas juba päris hästi, aga nüüd oli vaja teha projekti päris elule lähedamaks. Ühe väga suure osa sellest projektist hõlmas meetodite väljamõtlemine, me olime mootori, paagi, ratta ja simulatsiooni klassid juba teinud, nüüd oli vaja need ühtlustada. Kõik töötasid erinevate klasside kallal, ent ainuke kokkulepe, pärast pikka mõtiklust, oli, et meetodid peaksid kasutama ära kiirendust ja seetõttu oli klasside ühildamine probleemirohke. Siin oleks nüüd vaja natuke taustateadmisi mudelautodest: mudelautod on ~40cm pikkused väiksed autod, mis sõidavad 20 meetrise läbimõõduga ringrajal, kusjuures autod on kinnitatud ringi keskele peenikese traadiga, mis neid rajal hoiab, autod võivad olla väiksed, aga tegemist on ikkagist kiirusspordiga ja need autod võivad üle 300km/h sõita, aga see ainult sellisel juhul, kui autod on hästi kokku pandud. Tõepoolest, kõik sellised autod on käsitsi valmistatud ja seega puuduvad neil ka igasugused ettemääratud suurused, mida me kasutada tahaks. Klassid said mitu korda ümber kirjutatud ja muudetud, et saaksime panna autosõidu igast jupist kuidagi sõltuma, tihti pidime kasutama umbkaudseid suurusi, sest neid ei olnud võimalik kuidagigi välja arvutada. Kiiruse simuleerimisel kasutasime ka Jakimovi tabelit, mis on viis kuidas arvutada kiirust, RPM-i ja ratta suurust, üksteisest sõltuvalt. Lõpuks otsustasime, et kui me ei taha asjaga liiga füüsikaliseks minna, mida ta juba oli, siis pidime kasutama etteantud funktsioone, et lihtsusdada protsessi. Algselt mõtlesime kasutada pöördmomendi ja hobujõu graafikut, aga ka see vajas eelteadmisi, mida meil lihtsalt ei olnud võimalik saada, sest muidu oleks funktsioon aidanud simuleerida tavalise auto sõitu, aga mudelautode käitumine on hoopis teistsugune. Lõpuks kasutasime katse-eksitus meetodit, et õige funktsioon tekitada. Pärast seda pidime kõik klassid ühte programmi panema, et projekt oleks valmis viimistlusteks - selle protsessi käigus pidime klasse mitu korda muutma, kuna avastasime, et nende põhjal on simulatsioon vale, näiteks paagi klassi puhul pidime mitu korda muutma arvutusvalemite muutujaid, et kütus ühtlaselt kiirusest olenevalt langeks.

* --Klasside Kirjeldused ja tähtsamad meetodid--
[Constants] - Klass, mis määrab ära kõik programmis kasutatavad füüsikalised ning muud olulised konstandid. Kui programm kasutab oma töös konstante, mis on defineeritud ainult ühes ainsas kohas, siis on lihtsam neid hiljem muuta, testida ning sätestada.
Meie programmis on kasutusel Refresh Rate, mis on sisuliselt aeg, kui kaua tsükkel magab, ning FPS, mis määrab ära näidatava piltide arvu sekundis. See on vajalik selleks, et kui tahta kiiremini näha pilte, siis jääks programmi "sisemine" aeg ikkagi samaks, st. suurema FPSi korral ei jookseks programm kiiremini.

[UserInterface] - Klass, mis tegeleb programmi ja kasutaja vahelise kommunikatsiooniga seotud probleemidega. Klass saab näiteks küsida jah/ei küsimusi meetodiga askeYesNoQuestion(). Samuti kasutame seda klassi, et ekraanile joonistada erinevaid ASCII pilte meetoditega displayCountdown() ja returnNumber(), mis on selle abimeetod. Samuti tuvastab meetod greetPlayer(), kas kasutaja kasutab Intellij konsooli või command-line'i.

[CarPart] - Abstraktne klass, mis on iga autojupi ülemklassiks. Tal on üks abstraktne meetod getMass(), mis tähendab, et igal alamklassil peab olema defineeritud mass ning meetod selle tagastamiseks.
[Motor] - Mootori klass. Hoiab endas mootori võimsust, maksimum pöörete arvu, mootori temperatuuri ja kütuse kasutamise kiiruse muutujaid. Peamiselt koosneb ainult get- ja set-meetodidest.
[Reductor] - Käigukasti klass. Hoiab endas hammasrataste suhte jaoks muutujat ning vastavaid get- ja set-meetodeid.
[Wheels] - Rataste klass. Hoiab rataste diameetri jaoks muutujat ning vastavaid get- ja set-meetodeid.
[EnginePipe] - ...
[Tank] - Paagi klass. Hoiab paagi mahutavust, hetkolekut ning vastavaid get- ja set-meetodeid. Kogu paagi massi arvutamisks (koos kütusega) on tehtud spetsiaalne getMass() meetod.

[Car] - Klass, mis tegeleb kõigega, mis on seotud auto isendiga. Auto teab enda asukohta (kasvav üksainus koordinaat), kiirust, kiirendust, massi ning oma juppe. Samuti on autol olemas "stiil" ehk näidatav sümbol. Auto peamised meetodid on: updateVelocity(), mis arvutab auto uue massi, asukoha ning mootori hetkpöörded, mille põhjal arvutatakse kiirendus, mis hiljem lisatakse kiirusele juurde. Autol on olemas ka convertVelocityTo(), mis suudab teisendada kiirusühikuid km/h, m/s ja mph vahel. Tal on ka toString() meetod, mis tagastab kõik auto informatsiooni.

[Track] ja [TrackGenerator] - TrackGenerator on meetod, mis loob rajad, mida hiljem välja prinditakse (puhtalt visuaalne). Ainuke rada, mida me kasutame, on ringikujuline rada, mis luuakse ringjoone võrrandiga sisseantud raadiuse põhjal.
Track klass vastutab kõige eest, mis on seotud auto perioodilise näitamisega, auto asukoha arvutamise ja liigutamisega. Meetod moveCarAlong() on põhiline meetod, mis tegeleb auto asukoha määramisega. Kuna auto on määratud ainult ühe koordinaadiga, siis leiab see meetod kõigepealt, kui mitu täisringi on auto läbinud ning kui suur nurk jääb üle. Selle informatsiooni põhjal arvutab meetod välja ringi peal paiknevale (auto) jääknurgale vastava asukoha arvudena ning teisendab need indeksiteks, et auto maatriksis sinna asukohta paigutada. Meetod displayTrackPeriodically() kuvab auto, kutsub välja vastavad auto meetodid ning hiljem joonistab terve indeksite masiivi ekraanile.

[Exceptions] - ...
[Simulation] - ---
[Main] - ...

* --Programmi Testimine--
